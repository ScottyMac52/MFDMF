name: .NET 8 Single EXE Publish

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      runtime_id:
        description: "RID (e.g., win-x64, linux-x64, osx-x64)"
        required: false
        default: "win-x64"
      configuration:
        description: "Build configuration"
        required: false
        default: "Release"
      self_contained:
        description: "Publish self-contained (true/false)"
        required: false
        default: "true"
      publish_trimmed:
        description: "Trim (true/false) â€” validate before enabling"
        required: false
        default: "false"

env:
  DOTNET_VERSION: "8.0.x"
  # Change this to your entry project that produces the EXE:
  PROJECT_PATH: "MFDMF-App/MFDMFApp.csproj"
  # Defaults (can be overridden via workflow_dispatch inputs):
  RUNTIME_ID_DEFAULT: "win-x64"
  CONFIGURATION_DEFAULT: "Release"
  SELF_CONTAINED_DEFAULT: "true"
  PUBLISH_TRIMMED_DEFAULT: "false"
  # Single-file & related publish settings:
  PUBLISH_SINGLE_FILE: "true"
  READY_TO_RUN: "false"
  PUBLISH_DIR: "artifacts/publish"
  # Optional NuGet source (leave empty to use default sources)
  NUGET_SOURCE: ""

jobs:
  build-and-publish:
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Resolve effective settings
        shell: pwsh
        run: |
          # Pull inputs (present only for workflow_dispatch)
          $in_runtime   = "${{ github.event.inputs.runtime_id }}"
          $in_config    = "${{ github.event.inputs.configuration }}"
          $in_sc        = "${{ github.event.inputs.self_contained }}"
          $in_trim      = "${{ github.event.inputs.publish_trimmed }}"

          # Fallbacks to defaults when inputs are empty (push/PR)
          $rid   = if ([string]::IsNullOrWhiteSpace($in_runtime)) { "${{ env.RUNTIME_ID_DEFAULT }}" } else { $in_runtime }
          $conf  = if ([string]::IsNullOrWhiteSpace($in_config))  { "${{ env.CONFIGURATION_DEFAULT }}" } else { $in_config }
          $sc    = if ([string]::IsNullOrWhiteSpace($in_sc))      { "${{ env.SELF_CONTAINED_DEFAULT }}" } else { $in_sc }
          $trim  = if ([string]::IsNullOrWhiteSpace($in_trim))    { "${{ env.PUBLISH_TRIMMED_DEFAULT }}" } else { $in_trim }

          # Export for later steps
          "EFFECTIVE_RUNTIME_ID=$rid"       >> $env:GITHUB_ENV
          "EFFECTIVE_CONFIGURATION=$conf"   >> $env:GITHUB_ENV
          "EFFECTIVE_SELF_CONTAINED=$sc"    >> $env:GITHUB_ENV
          "EFFECTIVE_TRIMMED=$trim"         >> $env:GITHUB_ENV

          Write-Host "Resolved:"
          Write-Host "  RUNTIME_ID=$rid"
          Write-Host "  CONFIGURATION=$conf"
          Write-Host "  SELF_CONTAINED=$sc"
          Write-Host "  PUBLISH_TRIMMED=$trim"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        shell: pwsh
        run: |
          if (-not [string]::IsNullOrWhiteSpace("${{ env.NUGET_SOURCE }}")) {
            dotnet restore --source "${{ env.NUGET_SOURCE }}"
          } else {
            dotnet restore
          }

      - name: Build
        shell: pwsh
        run: |
          dotnet build --no-restore -c "${{ env.EFFECTIVE_CONFIGURATION }}"

      - name: Run tests (if present)
        shell: pwsh
        run: |
          if (Get-ChildItem -Recurse -Filter *.csproj | Select-String -SimpleMatch "<IsTestProject>true</IsTestProject>" -Quiet) {
            Write-Host "Test projects detected. Running tests..."
            dotnet test --no-build -c "${{ env.EFFECTIVE_CONFIGURATION }}" --logger "trx;LogFileName=test_results.trx"
          } else {
            Write-Host "No test projects detected. Skipping tests."
          }

      - name: Publish single-file executable
        shell: pwsh
        run: |
          $rid  = "${{ env.EFFECTIVE_RUNTIME_ID }}"
          $conf = "${{ env.EFFECTIVE_CONFIGURATION }}"
          $sc   = "${{ env.EFFECTIVE_SELF_CONTAINED }}"
          $trim = "${{ env.EFFECTIVE_TRIMMED }}"
          $out  = "${{ env.PUBLISH_DIR }}/$rid"

          New-Item -ItemType Directory -Force -Path "$out" | Out-Null

          dotnet publish "${{ env.PROJECT_PATH }}" `
            -c "$conf" `
            -r "$rid" `
            --self-contained:$sc `
            -p:PublishSingleFile=${{ env.PUBLISH_SINGLE_FILE }} `
            -p:PublishTrimmed=$trim `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:EnableCompressionInSingleFile=true `
            -p:ReadyToRun=${{ env.READY_TO_RUN }} `
            -o "$out"

          Write-Host "Publish complete to $out"

      - name: List published files
        shell: pwsh
        run: |
          Write-Host "Published files:"
          Get-ChildItem -Recurse "${{ env.PUBLISH_DIR }}\${{ env.EFFECTIVE_RUNTIME_ID }}"

      - name: Upload artifact (single EXE + support files)
        uses: actions/upload-artifact@v4
        with:
          name: single-exe-${{ env.EFFECTIVE_RUNTIME_ID }}
          path: ${{ env.PUBLISH_DIR }}/${{ env.EFFECTIVE_RUNTIME_ID }}
          if-no-files-found: error

