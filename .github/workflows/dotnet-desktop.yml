name: .NET 8 Single EXE Publish

permissions:
  contents: write   # needed to create releases

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*", "V*" ]     # build + release when pushing a tag like v1.2.3
    paths-ignore:
      - '.github/workflows/**/*.yml'
      - '.github/workflows/**/*.yaml'
  pull_request:
    branches: [ "main", "master" ]
    paths-ignore:
      - '.github/workflows/**/*.yml'
      - '.github/workflows/**/*.yaml'
  workflow_dispatch:
    inputs:
      runtime_id:
        description: "RID (e.g., win-x64, linux-x64, osx-x64)"
        required: false
        default: "win-x64"
      configuration:
        description: "Build configuration"
        required: false
        default: "Release"
      self_contained:
        description: "Publish self-contained (true/false)"
        required: false
        default: "true"
      publish_trimmed:
        description: "Trim (true/false) â€” validate before enabling"
        required: false
        default: "false"
      release_tag:
        description: "Release tag (e.g., v5.0.0). If blank, uses v<run_number>."
        required: false
        default: ""
      release_name:
        description: "Release name (optional)."
        required: false
        default: ""
      prerelease:
        description: "Override prerelease flag (true/false). Leave blank for auto."
        required: false
        default: ""

env:
  DOTNET_VERSION: "8.0.x"
  PROJECT_PATH: "MFDMF-App/MFDMFApp.csproj"

  RUNTIME_ID_DEFAULT: "win-x64"
  CONFIGURATION_DEFAULT: "Release"
  SELF_CONTAINED_DEFAULT: "true"
  PUBLISH_TRIMMED_DEFAULT: "false"

  PUBLISH_SINGLE_FILE: "true"
  READY_TO_RUN: "false"
  PUBLISH_DIR: "artifacts/publish"
  NUGET_SOURCE: ""

jobs:
  build-and-publish:
    runs-on: windows-2022

    outputs:
      runtime_id:       ${{ steps.resolve.outputs.runtime_id }}
      configuration:    ${{ steps.resolve.outputs.configuration }}
      self_contained:   ${{ steps.resolve.outputs.self_contained }}
      publish_trimmed:  ${{ steps.resolve.outputs.publish_trimmed }}
      artifact_name:    ${{ steps.nameartifact.outputs.artifact_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - id: resolve
        name: Resolve effective settings
        shell: pwsh
        run: |
          $in_runtime   = "${{ github.event.inputs.runtime_id }}"
          $in_config    = "${{ github.event.inputs.configuration }}"
          $in_sc        = "${{ github.event.inputs.self_contained }}"
          $in_trim      = "${{ github.event.inputs.publish_trimmed }}"

          $rid   = if ([string]::IsNullOrWhiteSpace($in_runtime)) { "${{ env.RUNTIME_ID_DEFAULT }}" } else { $in_runtime }
          $conf  = if ([string]::IsNullOrWhiteSpace($in_config))  { "${{ env.CONFIGURATION_DEFAULT }}" } else { $in_config }
          $sc    = if ([string]::IsNullOrWhiteSpace($in_sc))      { "${{ env.SELF_CONTAINED_DEFAULT }}" } else { $in_sc }
          $trim  = if ([string]::IsNullOrWhiteSpace($in_trim))    { "${{ env.PUBLISH_TRIMMED_DEFAULT }}" } else { $in_trim }

          "EFFECTIVE_RUNTIME_ID=$rid"       >> $env:GITHUB_ENV
          "EFFECTIVE_CONFIGURATION=$conf"   >> $env:GITHUB_ENV
          "EFFECTIVE_SELF_CONTAINED=$sc"    >> $env:GITHUB_ENV
          "EFFECTIVE_TRIMMED=$trim"         >> $env:GITHUB_ENV

          "runtime_id=$rid"        >> $env:GITHUB_OUTPUT
          "configuration=$conf"    >> $env:GITHUB_OUTPUT
          "self_contained=$sc"     >> $env:GITHUB_OUTPUT
          "publish_trimmed=$trim"  >> $env:GITHUB_OUTPUT

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Restore
        shell: pwsh
        run: |
          if (-not [string]::IsNullOrWhiteSpace("${{ env.NUGET_SOURCE }}")) {
            dotnet restore --source "${{ env.NUGET_SOURCE }}"
          } else {
            dotnet restore
          }

      - name: Build
        shell: pwsh
        run: |
          dotnet build --no-restore -c "${{ env.EFFECTIVE_CONFIGURATION }}"

      - name: Run tests (if present)
        shell: pwsh
        run: |
          if (Get-ChildItem -Recurse -Filter *.csproj | Select-String -SimpleMatch "<IsTestProject>true</IsTestProject>" -Quiet) {
            Write-Host "Test projects detected. Running tests..."
            dotnet test --no-build -c "${{ env.EFFECTIVE_CONFIGURATION }}" --logger "trx;LogFileName=test_results.trx"
          } else {
            Write-Host "No test projects detected. Skipping tests."
          }

      - name: Publish single-file executable
        shell: pwsh
        run: |
          $rid  = "${{ env.EFFECTIVE_RUNTIME_ID }}"
          $conf = "${{ env.EFFECTIVE_CONFIGURATION }}"
          $sc   = "${{ env.EFFECTIVE_SELF_CONTAINED }}"
          $trim = "${{ env.EFFECTIVE_TRIMMED }}"
          $out  = "${{ env.PUBLISH_DIR }}/$rid"

          New-Item -ItemType Directory -Force -Path "$out" | Out-Null

          dotnet publish "${{ env.PROJECT_PATH }}" `
            -c "$conf" `
            -r "$rid" `
            --self-contained:$sc `
            -p:PublishSingleFile=${{ env.PUBLISH_SINGLE_FILE }} `
            -p:PublishTrimmed=$trim `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:EnableCompressionInSingleFile=true `
            -p:ReadyToRun=${{ env.READY_TO_RUN }} `
            -o "$out"

      - id: nameartifact
        name: Name artifact
        shell: pwsh
        run: |
          $artifactName = "single-exe-${{ env.EFFECTIVE_RUNTIME_ID }}"
          "artifact_name=$artifactName" >> $env:GITHUB_OUTPUT

      - name: Upload artifact (single EXE + support files)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.nameartifact.outputs.artifact_name }}
          path: ${{ env.PUBLISH_DIR }}/${{ env.EFFECTIVE_RUNTIME_ID }}
          if-no-files-found: error

  release:
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    needs: build-and-publish
    runs-on: ubuntu-latest

    steps:
      - name: Determine release values
        id: relvals
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${{ github.event.inputs.release_tag }}"
            if [[ -z "$TAG" ]]; then TAG="v${GITHUB_RUN_NUMBER}"; fi
          fi

          NAME="${{ github.event.inputs.release_name }}"
          if [[ -z "$NAME" ]]; then NAME="Release ${TAG}"; fi

          # Auto-prerelease if tag includes -alpha/-beta/-rc, else false.
          PRERELEASE_INPUT="${{ github.event.inputs.prerelease }}"
          if [[ -n "$PRERELEASE_INPUT" ]]; then
            PRERELEASE="$PRERELEASE_INPUT"
          else
            if [[ "$TAG" =~ -(alpha|beta|rc) ]]; then PRERELEASE="true"; else PRERELEASE="false"; fi
          fi

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"
          echo "Releases page: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${TAG}"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-and-publish.outputs.artifact_name }}
        # default path = ./<artifact_name>; we'll re-zip from there

      - name: Package artifact into a single zip
        id: pack
        shell: bash
        run: |
          set -e
          TAG="${{ steps.relvals.outputs.tag }}"
          RID="${{ needs.build-and-publish.outputs.runtime_id }}"
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          ARCHIVE="${REPO_NAME}-${TAG}-${RID}.zip"

          # zip the downloaded artifact folder into one file
          zip -r "$ARCHIVE" "${{ needs.build-and-publish.outputs.artifact_name }}"

          # also try to find a main .exe (optional convenience upload)
          EXE_PATH="$(find "${{ needs.build-and-publish.outputs.artifact_name }}" -maxdepth 3 -type f -name '*.exe' | head -n1 || true)"

          echo "archive=${ARCHIVE}" >> "$GITHUB_OUTPUT"
          echo "exe=${EXE_PATH}" >> "$GITHUB_OUTPUT"

      - name: Ensure release exists (create if missing)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          TAG="${{ steps.relvals.outputs.tag }}"
          NAME="${{ steps.relvals.outputs.name }}"
          PRERELEASE="${{ steps.relvals.outputs.prerelease }}"
          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            echo "Release $TAG exists."
          else
            echo "Creating release $TAG..."
            if [[ "$PRERELEASE" == "true" ]]; then
              gh release create "$TAG" --title "$NAME" --generate-notes --prerelease --repo "$GITHUB_REPOSITORY"
            else
              gh release create "$TAG" --title "$NAME" --generate-notes --repo "$GITHUB_REPOSITORY"
            fi
          fi
          echo "Release URL: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${TAG}"

      - name: Upload assets (zip + optional exe)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          TAG="${{ steps.relvals.outputs.tag }}"
          ARCHIVE="${{ steps.pack.outputs.archive }}"
          EXE="${{ steps.pack.outputs.exe }}"

          if [[ -n "$EXE" ]]; then
            gh release upload "$TAG" "$ARCHIVE" "$EXE" --clobber --repo "$GITHUB_REPOSITORY"
          else
            gh release upload "$TAG" "$ARCHIVE" --clobber --repo "$GITHUB_REPOSITORY"
          fi

          echo "Uploaded assets to: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${TAG}"
